{"version":3,"sources":["BankDetails.jsx","Pagination.jsx","BankSearch.jsx","Favourite.jsx","App.jsx","serviceWorker.js","index.js"],"names":["BankDetails","props","loading","bankdetails","length","className","Table","striped","bordered","hover","size","indexOfFirstBank","addBanktoFavourites","count","map","bank","bankIndex","key","ifsc","bank_name","branch","address","city","district","state","favourites","onClick","getBankDetails","Pagination","banksPerPage","totalBanks","paginate","currentSelectedPage","pageNumbers","i","Math","ceil","push","number","BankSearch","banks","selectedCity","searchBox","currentPage","handleSearchChange","bind","handleCityChange","handlePageChange","sortCurrentView","val","arr","Object","assign","this","forEach","ele","toLowerCase","indexOf","sort","a","b","setState","event","target","value","preventDefault","updatedValue","cachedRes","sessionStorage","getItem","JSON","parse","Axios","get","params","then","res","data","setItem","stringify","pageNumber","sessionFav","indexOfLastBank","currentBanks","slice","Fragment","onChange","type","href","React","Component","Favourite","sessionfav","useState","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAsEeA,MAhCf,SAAqBC,GACnB,OAAKA,EAAMC,SAAWD,EAAME,YAAYC,OAEpC,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MACjC,+BACE,4BACE,yCACA,yCACA,sCACA,uCACA,oCACA,wCACA,qCACA,+BAGJ,+BAnDa,SAACP,EAAaQ,EAAkBC,GACrD,IAAIC,EAAQ,EA8BZ,OA7BiBV,EAAYW,KAAI,SAAAC,GAC/B,IAAMC,EAAYL,EAAmBE,EAErC,OADAA,GAAS,EAEP,wBAAII,IAAKF,EAAKG,MACZ,4BAAKH,EAAKI,WACV,4BAAKJ,EAAKG,MACV,4BAAKH,EAAKK,QACV,4BAAKL,EAAKM,SACV,4BAAKN,EAAKO,MACV,4BAAKP,EAAKQ,UACV,4BAAKR,EAAKS,OACV,4BACGT,EAAKU,WACJ,4BAAQpB,UAAU,oCAAlB,uBAIA,4BACEA,UAAU,0BACVqB,QAAS,kBAAMd,EAAoBI,KAFrC,0BAgCCW,CACC1B,EAAME,YACNF,EAAMU,iBACNV,EAAMW,wBAOT,M,iBChEEgB,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,aACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,oBAGA,GADI,EADJ9B,QAEa,OAAO,wBAAIG,UAAU,OAAd,cAGlB,IADA,IAAM4B,EAAc,GACXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKN,EAAaD,GAAeK,IACzDD,EAAYI,KAAKH,GAGnB,OACE,yBAAK7B,UAAU,OACb,wBAAIA,UAAU,cACX4B,EAAYnB,KAAI,SAAAwB,GAAM,OACrB,wBACErB,IAAKqB,EACLjC,UACEiC,IAAWN,EACP,mBACA,aAGN,uBAAGN,QAAS,kBAAMK,EAASO,IAASjC,UAAU,aAC3CiC,UC+HFC,E,YArJb,aAAe,IAAD,8BACZ,+CACKf,MAAQ,CACXgB,MAAO,GACPC,aAAc,GACdC,UAAW,GACXC,YAAa,EACbd,aAAc,IACd3B,SAAS,GAEX,EAAK0C,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKd,SAAW,EAAKA,SAASc,KAAd,gBAChB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB,EAAKG,gBAAkB,EAAKA,gBAAgBH,KAArB,gBACvB,EAAKjC,oBAAsB,EAAKA,oBAAoBiC,KAAzB,gBAff,E,6EAkBEI,GACd,IAAIC,EAAMC,OAAOC,OAAO,GAAIC,KAAK7B,MAAMgB,OACvCU,EAAII,SAAQ,SAAAC,GACV,IAAI1C,EAAQ,GACsC,IAA9C0C,EAAIpC,UAAUqC,cAAcC,QAAQR,KAAapC,GAAS,IACjB,IAAzC0C,EAAIrC,KAAKsC,cAAcC,QAAQR,KAAapC,GAAS,IACV,IAA3C0C,EAAInC,OAAOoC,cAAcC,QAAQR,KAAapC,GAAS,IACX,IAA5C0C,EAAIlC,QAAQmC,cAAcC,QAAQR,KAAapC,GAAS,IACf,IAAzC0C,EAAIjC,KAAKkC,cAAcC,QAAQR,KAAapC,GAAS,IACR,IAA7C0C,EAAIhC,SAASiC,cAAcC,QAAQR,KAAapC,GAAS,IACf,IAA1C0C,EAAI/B,MAAMgC,cAAcC,QAAQR,KAAapC,GAAS,GAC1D0C,EAAI1C,MAAQA,KAEdqC,EAAIQ,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9C,MAAQ+C,EAAE/C,OAAS,EAAI,KAC7CwC,KAAKQ,SAAS,CAAErB,MAAOU,M,yCAGNY,GACjB,IAAMb,EAAMa,EAAMC,OAAOC,MACzBX,KAAKQ,SAAS,CAAEnB,UAAWO,IAC3Ba,EAAMG,iBACNZ,KAAKL,gBAAgBC,EAAIO,iB,uCAEVM,GAAQ,IAAD,OACtBA,EAAMG,iBACNZ,KAAKQ,SAAS,CAAE3D,SAAS,IACzB,IAAMgE,EAAeJ,EAAMC,OAAOC,MAClCX,KAAKQ,SAAS,CAAEpB,aAAcyB,IAC9B,IAAMC,EAAYC,eAAeC,QAAQH,GACrCC,GACFd,KAAKQ,SAAS,CAAErB,MAAO8B,KAAKC,MAAMJ,KAClCd,KAAKQ,SAAS,CAAE3D,SAAS,KAEzBsE,IAAMC,IAAI,+CAAgD,CACxDC,OAAQ,CACNpD,KAAM4C,KAEPS,MAAK,SAAAC,GACN,EAAKf,SAAS,CAAErB,MAAOoC,EAAIC,OAC3BT,eAAeU,QAAQZ,EAAcI,KAAKS,UAAUH,EAAIC,OACxD,EAAKhB,SAAS,CAAE3D,SAAS,OAG7BmD,KAAKQ,SAAS,CAAElB,YAAa,M,+BAEtBqC,GACP3B,KAAKQ,SAAS,CAAElB,YAAaqC,M,uCAEdlB,GACfT,KAAKQ,SAAS,CAAEhC,aAAciC,EAAMC,OAAOC,QAC3CF,EAAMG,mB,0CAGYjD,GAClB,IAAIkC,EAAMC,OAAOC,OAAO,GAAIC,KAAK7B,MAAMgB,OACvCU,EAAIlC,GAAWS,YAAa,EAC5B4B,KAAKQ,SAAS,CAAErB,MAAOU,IACvBkB,eAAeU,QAAQzB,KAAK7B,MAAMiB,aAAc6B,KAAKS,UAAU7B,IAC/D,IAAI+B,EAAaX,KAAKC,MAAMH,eAAeC,QAAQ,eAC/CY,GACFA,EAAW5C,KAAKa,EAAIlC,IACpBoD,eAAeU,QAAQ,aAAcR,KAAKS,UAAUE,KAEpDb,eAAeU,QAAQ,aAAcR,KAAKS,UAAU,CAAC7B,EAAIlC,Q,+BAI3D,IAAMkE,EAAkB7B,KAAK7B,MAAMmB,YAAcU,KAAK7B,MAAMK,aACtDlB,EAAmBuE,EAAkB7B,KAAK7B,MAAMK,aAChDsD,EAAe9B,KAAK7B,MAAMgB,MAAM4C,MACpCzE,EACAuE,GAEF,OACE,kBAAC,IAAMG,SAAP,KACE,wBAAIhF,UAAU,OAAd,iBAEA,2BAAOA,UAAU,QAAjB,QAEE,4BACEA,UAAU,OACV2D,MAAOX,KAAK7B,MAAMiB,aAClB6C,SAAUjC,KAAKP,kBAEf,4BAAQkB,MAAM,IAAd,cACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,WAAd,aAGJ,2BAAO3D,UAAU,QAAjB,UAEE,2BACEA,UAAU,OACVkF,KAAK,OACLvB,MAAOX,KAAK7B,MAAMkB,UAClB4C,SAAUjC,KAAKT,sBAGnB,2BAAOvC,UAAU,QAAjB,eAEE,2BACEA,UAAU,OACVkF,KAAK,SACLvB,MAAOX,KAAK7B,MAAMK,aAClByD,SAAUjC,KAAKN,oBAGnB,uBAAGyC,KAAK,aAAanF,UAAU,gCAA/B,oBAGA,kBAAC,EAAD,CACEwB,aAAcwB,KAAK7B,MAAMK,aACzBC,WAAYuB,KAAK7B,MAAMgB,MAAMpC,OAC7B2B,SAAUsB,KAAKtB,SACfC,oBAAqBqB,KAAK7B,MAAMmB,YAChCzC,QAASmD,KAAK7B,MAAMtB,UAEtB,kBAAC,EAAD,CACEA,QAASmD,KAAK7B,MAAMtB,QACpBC,YAAagF,EACbxE,iBAAkBA,EAClBC,oBAAqByC,KAAKzC,2B,GA/IX6E,IAAMC,W,uBC6ChBC,MA/Bf,WACE,IAAMC,EAAatB,KAAKC,MAAMH,eAAeC,QAAQ,gBAAkB,GADpD,EAEEwB,mBAASD,GAAvBnE,EAFY,oBAGnB,OACE,kBAAC,IAAM4D,SAAP,KACE,wBAAIhF,UAAU,OAAd,iBACA,uBAAGmF,KAAK,IAAInF,UAAU,gCAAtB,0BAGCoB,EAAWrB,OAAS,GACnB,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MACjC,+BACE,4BACE,yCACA,yCACA,sCACA,uCACA,oCACA,wCACA,uCAGJ,+BAAuBe,EAvCJX,KAAI,SAAAC,GAC/B,OACE,wBAAIE,IAAKF,EAAKG,MACZ,4BAAKH,EAAKI,WACV,4BAAKJ,EAAKG,MACV,4BAAKH,EAAKK,QACV,4BAAKL,EAAKM,SACV,4BAAKN,EAAKO,MACV,4BAAKP,EAAKQ,UACV,4BAAKR,EAAKS,gBCUHsE,MAlBf,WACE,OACE,kBAAC,IAAD,KAIE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,UCJUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.c17667b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport \"./App.css\";\r\n\r\nconst getBankDetails = (bankdetails, indexOfFirstBank, addBanktoFavourites) => {\r\n  let count = 0;\r\n  const bankrows = bankdetails.map(bank => {\r\n    const bankIndex = indexOfFirstBank + count;\r\n    count += 1;\r\n    return (\r\n      <tr key={bank.ifsc}>\r\n        <td>{bank.bank_name}</td>\r\n        <td>{bank.ifsc}</td>\r\n        <td>{bank.branch}</td>\r\n        <td>{bank.address}</td>\r\n        <td>{bank.city}</td>\r\n        <td>{bank.district}</td>\r\n        <td>{bank.state}</td>\r\n        <td>\r\n          {bank.favourites ? (\r\n            <button className=\"btn btn-outline-primary disabled\">\r\n              Added to Favourites\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className=\"btn btn-outline-primary\"\r\n              onClick={() => addBanktoFavourites(bankIndex)}\r\n            >\r\n              Add to Favourites\r\n            </button>\r\n          )}\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n  return bankrows;\r\n};\r\n\r\nfunction BankDetails(props) {\r\n  if (!props.loading && props.bankdetails.length) {\r\n    return (\r\n      <div className=\"m-4\">\r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>Bank Name</th>\r\n              <th>IFSC Code</th>\r\n              <th>Branch</th>\r\n              <th>Address</th>\r\n              <th>City</th>\r\n              <th>District</th>\r\n              <th>State</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {getBankDetails(\r\n              props.bankdetails,\r\n              props.indexOfFirstBank,\r\n              props.addBanktoFavourites\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default BankDetails;\r\n","import React from \"react\";\r\n\r\nexport const Pagination = ({\r\n  banksPerPage,\r\n  totalBanks,\r\n  paginate,\r\n  currentSelectedPage,\r\n  loading\r\n}) => {\r\n  if (loading) return <h4 className=\"m-4\">Loading...</h4>;\r\n  else {\r\n    const pageNumbers = [];\r\n    for (let i = 1; i <= Math.ceil(totalBanks / banksPerPage); i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n      <nav className=\"m-5\">\r\n        <ul className=\"pagination\">\r\n          {pageNumbers.map(number => (\r\n            <li\r\n              key={number}\r\n              className={\r\n                number === currentSelectedPage\r\n                  ? \"page-item active\"\r\n                  : \"page-item\"\r\n              }\r\n            >\r\n              <a onClick={() => paginate(number)} className=\"page-link\">\r\n                {number}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport BankDetails from \"./BankDetails\";\nimport Axios from \"axios\";\nimport { Pagination } from \"./Pagination\";\n\nclass BankSearch extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      banks: [],\n      selectedCity: \"\",\n      searchBox: \"\",\n      currentPage: 1,\n      banksPerPage: 100,\n      loading: false\n    };\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleCityChange = this.handleCityChange.bind(this);\n    this.paginate = this.paginate.bind(this);\n    this.handlePageChange = this.handlePageChange.bind(this);\n    this.sortCurrentView = this.sortCurrentView.bind(this);\n    this.addBanktoFavourites = this.addBanktoFavourites.bind(this);\n  }\n\n  sortCurrentView(val) {\n    let arr = Object.assign([], this.state.banks);\n    arr.forEach(ele => {\n      let count = 0;\n      if (ele.bank_name.toLowerCase().indexOf(val) !== -1) count += 1;\n      if (ele.ifsc.toLowerCase().indexOf(val) !== -1) count += 1;\n      if (ele.branch.toLowerCase().indexOf(val) !== -1) count += 1;\n      if (ele.address.toLowerCase().indexOf(val) !== -1) count += 1;\n      if (ele.city.toLowerCase().indexOf(val) !== -1) count += 1;\n      if (ele.district.toLowerCase().indexOf(val) !== -1) count += 1;\n      if (ele.state.toLowerCase().indexOf(val) !== -1) count += 1;\n      ele.count = count;\n    });\n    arr.sort((a, b) => (a.count > b.count ? -1 : 1));\n    this.setState({ banks: arr });\n  }\n\n  handleSearchChange(event) {\n    const val = event.target.value;\n    this.setState({ searchBox: val });\n    event.preventDefault();\n    this.sortCurrentView(val.toLowerCase());\n  }\n  handleCityChange(event) {\n    event.preventDefault();\n    this.setState({ loading: true });\n    const updatedValue = event.target.value;\n    this.setState({ selectedCity: updatedValue });\n    const cachedRes = sessionStorage.getItem(updatedValue);\n    if (cachedRes) {\n      this.setState({ banks: JSON.parse(cachedRes) });\n      this.setState({ loading: false });\n    } else {\n      Axios.get(\"https://vast-shore-74260.herokuapp.com/banks\", {\n        params: {\n          city: updatedValue\n        }\n      }).then(res => {\n        this.setState({ banks: res.data });\n        sessionStorage.setItem(updatedValue, JSON.stringify(res.data));\n        this.setState({ loading: false });\n      });\n    }\n    this.setState({ currentPage: 1 });\n  }\n  paginate(pageNumber) {\n    this.setState({ currentPage: pageNumber });\n  }\n  handlePageChange(event) {\n    this.setState({ banksPerPage: event.target.value });\n    event.preventDefault();\n  }\n\n  addBanktoFavourites(bankIndex) {\n    let arr = Object.assign([], this.state.banks);\n    arr[bankIndex].favourites = true;\n    this.setState({ banks: arr });\n    sessionStorage.setItem(this.state.selectedCity, JSON.stringify(arr));\n    let sessionFav = JSON.parse(sessionStorage.getItem(\"favourites\"));\n    if (sessionFav) {\n      sessionFav.push(arr[bankIndex]);\n      sessionStorage.setItem(\"favourites\", JSON.stringify(sessionFav));\n    } else {\n      sessionStorage.setItem(\"favourites\", JSON.stringify([arr[bankIndex]]));\n    }\n  }\n  render() {\n    const indexOfLastBank = this.state.currentPage * this.state.banksPerPage;\n    const indexOfFirstBank = indexOfLastBank - this.state.banksPerPage;\n    const currentBanks = this.state.banks.slice(\n      indexOfFirstBank,\n      indexOfLastBank\n    );\n    return (\n      <React.Fragment>\n        <h3 className=\"m-4\">Bank-Searches</h3>\n\n        <label className=\"ml-4\">\n          CITY:\n          <select\n            className=\"ml-2\"\n            value={this.state.selectedCity}\n            onChange={this.handleCityChange}\n          >\n            <option value=\"\">Select One</option>\n            <option value=\"DELHI\">Delhi</option>\n            <option value=\"KOLKATA\">Kolkata</option>\n            <option value=\"MUMBAI\">Mumbai</option>\n            <option value=\"BANGALORE\">Bangalore</option>\n            <option value=\"CHENNAI\">Chennai</option>\n          </select>\n        </label>\n        <label className=\"ml-4\">\n          Search:\n          <input\n            className=\"ml-2\"\n            type=\"text\"\n            value={this.state.searchBox}\n            onChange={this.handleSearchChange}\n          />\n        </label>\n        <label className=\"ml-4\">\n          No. of rows:\n          <input\n            className=\"ml-2\"\n            type=\"number\"\n            value={this.state.banksPerPage}\n            onChange={this.handlePageChange}\n          />\n        </label>\n        <a href=\"/favourite\" className=\"ml-4 btn btn-outline-primary\">\n          Go to Favourites\n        </a>\n        <Pagination\n          banksPerPage={this.state.banksPerPage}\n          totalBanks={this.state.banks.length}\n          paginate={this.paginate}\n          currentSelectedPage={this.state.currentPage}\n          loading={this.state.loading}\n        />\n        <BankDetails\n          loading={this.state.loading}\n          bankdetails={currentBanks}\n          indexOfFirstBank={indexOfFirstBank}\n          addBanktoFavourites={this.addBanktoFavourites}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BankSearch;\n","import React, { useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nconst getBankDetails = bankdetails => {\r\n  const bankrows = bankdetails.map(bank => {\r\n    return (\r\n      <tr key={bank.ifsc}>\r\n        <td>{bank.bank_name}</td>\r\n        <td>{bank.ifsc}</td>\r\n        <td>{bank.branch}</td>\r\n        <td>{bank.address}</td>\r\n        <td>{bank.city}</td>\r\n        <td>{bank.district}</td>\r\n        <td>{bank.state}</td>\r\n      </tr>\r\n    );\r\n  });\r\n  return bankrows;\r\n};\r\n\r\nfunction Favourite() {\r\n  const sessionfav = JSON.parse(sessionStorage.getItem(\"favourites\")) || [];\r\n  const [favourites] = useState(sessionfav);\r\n  return (\r\n    <React.Fragment>\r\n      <h3 className=\"m-4\">Bank-Searches</h3>\r\n      <a href=\"/\" className=\"ml-4 btn btn-outline-primary\">\r\n        Go Back to Bank Search\r\n      </a>\r\n      {favourites.length > 0 && (\r\n        <div className=\"m-4\">\r\n          <Table striped bordered hover size=\"sm\">\r\n            <thead>\r\n              <tr>\r\n                <th>Bank Name</th>\r\n                <th>IFSC Code</th>\r\n                <th>Branch</th>\r\n                <th>Address</th>\r\n                <th>City</th>\r\n                <th>District</th>\r\n                <th>State</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{getBankDetails(favourites)}</tbody>\r\n          </Table>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Favourite;\r\n","import React from \"react\";\r\nimport BankSearch from \"./BankSearch\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Favourite from \"./Favourite\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      {/* <Link to=\"/\">Bank Search</Link>\r\n        <Link to=\"/favourite\">Favourites</Link> */}\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <BankSearch />\r\n        </Route>\r\n        <Route path=\"/favourite\">\r\n          <Favourite />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}